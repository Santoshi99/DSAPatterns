class UnionFind{
     
     int[] parent;
     int n;
     public UnionFind(int n){
        parent = new int[n+1];
        for(int i = 1;i<=n;i++){
        parent[i] = i;
        }
     }
     public int find(int x){
         if(x==parent[x]) return x;
         parent[x] = find(parent[x]);
         return parent[x];
     }
     public boolean union(int x, int y){
        int xpar = find(x);
        int ypar = find(y);
        if(xpar==ypar) return false;
        parent[xpar] =  ypar;
        return true;
     }
}

class Solution {
    
    public int[] findRedundantConnection(int[][] edges) {
         
          UnionFind uf = new UnionFind(edges.length);
          int[] result = new int[]{-1,-1};
          for(int i = 0;i<edges.length;i++){
             if(!uf.union(edges[i][0],edges[i][1])) result =  edges[i];
          }
          return result;
    }

}
